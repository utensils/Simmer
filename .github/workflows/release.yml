name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Build, Sign, Notarize & Release
    runs-on: macos-15

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Xcode
        run: |
          sudo xcode-select -s /Applications/Xcode_16.1.app
          xcodebuild -version

      - name: Extract version from tag
        id: version
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "Version: ${VERSION}"

      - name: Import code signing certificate
        env:
          APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          # Create temporary keychain
          KEYCHAIN_PATH="$RUNNER_TEMP/app-signing.keychain-db"
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)

          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Import certificate
          echo "$APPLE_CERTIFICATE_P12" | base64 --decode > certificate.p12
          security import certificate.p12 \
            -k "$KEYCHAIN_PATH" \
            -P "$APPLE_CERTIFICATE_PASSWORD" \
            -T /usr/bin/codesign \
            -T /usr/bin/productsign

          security list-keychain -d user -s "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          rm certificate.p12

      - name: Build and archive
        run: |
          xcodebuild clean archive \
            -scheme Simmer \
            -configuration Release \
            -archivePath "$RUNNER_TEMP/Simmer.xcarchive" \
            -destination 'platform=macOS' \
            ARCHS="arm64 x86_64" \
            ONLY_ACTIVE_ARCH=NO \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Developer ID Application" \
            DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
            OTHER_CODE_SIGN_FLAGS="--timestamp --options runtime"

          ARCHIVE_EXIT_CODE=$?

          if [ "$ARCHIVE_EXIT_CODE" -ne 0 ]; then
            echo "❌ FAIL: Archive failed"
            exit 1
          fi

          echo "✅ Archive succeeded"

      - name: Export app bundle
        run: |
          # Create export options plist
          cat > "$RUNNER_TEMP/ExportOptions.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>developer-id</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>teamID</key>
            <string>${{ secrets.APPLE_TEAM_ID }}</string>
            <key>signingCertificate</key>
            <string>Developer ID Application</string>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath "$RUNNER_TEMP/Simmer.xcarchive" \
            -exportPath "$RUNNER_TEMP/export" \
            -exportOptionsPlist "$RUNNER_TEMP/ExportOptions.plist"

          EXPORT_EXIT_CODE=$?

          if [ "$EXPORT_EXIT_CODE" -ne 0 ]; then
            echo "❌ FAIL: Export failed"
            exit 1
          fi

          echo "✅ Export succeeded"
          ls -la "$RUNNER_TEMP/export/"

      - name: Notarize app bundle
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY_CONTENT: ${{ secrets.APPLE_API_KEY_CONTENT }}
        run: |
          # Save API key to file
          echo "$APPLE_API_KEY_CONTENT" > "$RUNNER_TEMP/AuthKey.p8"

          # Create zip for notarization
          ditto -c -k --keepParent "$RUNNER_TEMP/export/Simmer.app" "$RUNNER_TEMP/Simmer.zip"

          # Submit for notarization
          xcrun notarytool submit "$RUNNER_TEMP/Simmer.zip" \
            --key "$RUNNER_TEMP/AuthKey.p8" \
            --key-id "$APPLE_API_KEY_ID" \
            --issuer "$APPLE_API_ISSUER" \
            --wait \
            --timeout 30m

          NOTARIZE_EXIT_CODE=$?

          if [ "$NOTARIZE_EXIT_CODE" -ne 0 ]; then
            echo "❌ FAIL: Notarization failed"
            exit 1
          fi

          echo "✅ Notarization succeeded"

          # Clean up
          rm "$RUNNER_TEMP/AuthKey.p8"
          rm "$RUNNER_TEMP/Simmer.zip"

      - name: Staple notarization ticket
        run: |
          xcrun stapler staple "$RUNNER_TEMP/export/Simmer.app"

          STAPLE_EXIT_CODE=$?

          if [ "$STAPLE_EXIT_CODE" -ne 0 ]; then
            echo "❌ FAIL: Stapling failed"
            exit 1
          fi

          echo "✅ Stapling succeeded"

          # Verify stapling
          xcrun stapler validate "$RUNNER_TEMP/export/Simmer.app"

      - name: Create DMG installer
        id: dmg
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          DMG_NAME="Simmer-${VERSION}.dmg"

          # Create temporary directory for DMG contents
          DMG_DIR="$RUNNER_TEMP/dmg"
          mkdir -p "$DMG_DIR"

          # Copy app bundle
          cp -R "$RUNNER_TEMP/export/Simmer.app" "$DMG_DIR/"

          # Create Applications symlink
          ln -s /Applications "$DMG_DIR/Applications"

          # Create DMG using hdiutil (native macOS tool)
          hdiutil create -volname "Simmer ${VERSION}" \
            -srcfolder "$DMG_DIR" \
            -ov \
            -format UDZO \
            "$RUNNER_TEMP/${DMG_NAME}"

          DMG_EXIT_CODE=$?

          if [ "$DMG_EXIT_CODE" -ne 0 ]; then
            echo "❌ FAIL: DMG creation failed"
            exit 1
          fi

          echo "✅ DMG created successfully"
          echo "dmg_path=$RUNNER_TEMP/${DMG_NAME}" >> "$GITHUB_OUTPUT"
          echo "dmg_name=${DMG_NAME}" >> "$GITHUB_OUTPUT"

          # Verify DMG
          hdiutil verify "$RUNNER_TEMP/${DMG_NAME}"

      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREV_TAG=$(git describe --abbrev=0 --tags "${GITHUB_REF}^" 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            echo "## Changes" > "$RUNNER_TEMP/CHANGELOG.md"
            echo "" >> "$RUNNER_TEMP/CHANGELOG.md"
            echo "Initial release" >> "$RUNNER_TEMP/CHANGELOG.md"
          else
            echo "## Changes since ${PREV_TAG}" > "$RUNNER_TEMP/CHANGELOG.md"
            echo "" >> "$RUNNER_TEMP/CHANGELOG.md"
            git log "${PREV_TAG}..HEAD" --pretty=format:"- %s (%h)" >> "$RUNNER_TEMP/CHANGELOG.md"
          fi

          cat "$RUNNER_TEMP/CHANGELOG.md"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          prerelease: false
          body_path: ${{ runner.temp }}/CHANGELOG.md
          files: |
            ${{ steps.dmg.outputs.dmg_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up keychain
        if: always()
        run: |
          KEYCHAIN_PATH="$RUNNER_TEMP/app-signing.keychain-db"
          if [ -f "$KEYCHAIN_PATH" ]; then
            security delete-keychain "$KEYCHAIN_PATH" || true
          fi
