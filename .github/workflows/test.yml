name: Automated Testing

on:
  pull_request:
    branches: [main, 'feature/**']
  push:
    branches: [main, 'feature/**']

jobs:
  test:
    name: Run Tests & Coverage
    runs-on: macos-15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.1.app

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Run tests with coverage
        run: |
          xcodebuild test \
            -scheme Simmer \
            -destination 'platform=macOS' \
            -enableCodeCoverage YES \
            -derivedDataPath DerivedData \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            SWIFT_TREAT_WARNINGS_AS_ERRORS=NO \
            | xcpretty --color

      - name: Generate coverage report
        run: |
          # Create coverage directory
          mkdir -p coverage

          # Try xcov first (likely not installed on runner)
          xcrun xcov \
            --scheme Simmer \
            --derived_data_path DerivedData \
            --json_report \
            --output_directory coverage \
            || echo "xcov not installed, using xccov instead"

          # Fallback to xccov if xcov not available
          if [ ! -f coverage/index.json ]; then
            xcrun xccov view \
              --report \
              --json \
              DerivedData/Logs/Test/*.xcresult > coverage/coverage.json
          fi

      - name: Convert coverage to LCOV format
        run: |
          # Find the xcresult bundle
          XCRESULT_PATH=$(find DerivedData/Logs/Test -name "*.xcresult" | head -n 1)

          # Find the profdata file
          PROFDATA_PATH=$(find "$XCRESULT_PATH" -name "*.profdata" | head -n 1)

          # Find the app binary
          BINARY_PATH="DerivedData/Build/Products/Debug/Simmer.app/Contents/MacOS/Simmer"

          # Convert to lcov format
          xcrun llvm-cov export \
            -format="lcov" \
            -instr-profile="$PROFDATA_PATH" \
            "$BINARY_PATH" > coverage/coverage.lcov

          echo "✅ Converted coverage to LCOV format"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/coverage.lcov
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: Check coverage thresholds
        run: |
          # Extract coverage percentage from xccov report
          COVERAGE_FILE="coverage/coverage.json"

          if [ ! -f "$COVERAGE_FILE" ]; then
            echo "❌ Coverage report not found"
            exit 1
          fi

          # Parse overall coverage percentage
          OVERALL_COVERAGE=$(xcrun xccov view --report DerivedData/Logs/Test/*.xcresult | grep -E "^\s+Simmer.app" | awk '{print $3}' | sed 's/%//')

          echo "Overall coverage: ${OVERALL_COVERAGE}%"

          # Check minimum 70% overall coverage
          if (( $(echo "$OVERALL_COVERAGE < 70" | bc -l) )); then
            echo "❌ FAIL: Overall coverage (${OVERALL_COVERAGE}%) is below 70% threshold"
            exit 1
          fi

          echo "✅ PASS: Overall coverage meets 70% threshold"

          # Check critical paths (PatternMatcher, FileWatcher) have 100% coverage
          echo "Checking critical path coverage..."

          PATTERN_MATCHER_COV=$(xcrun xccov view --report --files-for-target Simmer.app DerivedData/Logs/Test/*.xcresult | grep "PatternMatcher.swift" | awk '{print $4}' | sed 's/%//' || echo "0")
          FILE_WATCHER_COV=$(xcrun xccov view --report --files-for-target Simmer.app DerivedData/Logs/Test/*.xcresult | grep "FileWatcher.swift" | awk '{print $4}' | sed 's/%//' || echo "0")

          echo "PatternMatcher.swift coverage: ${PATTERN_MATCHER_COV}%"
          echo "FileWatcher.swift coverage: ${FILE_WATCHER_COV}%"

          CRITICAL_FAIL=0

          if (( $(echo "$PATTERN_MATCHER_COV < 100" | bc -l) )); then
            echo "⚠️  WARNING: PatternMatcher.swift coverage (${PATTERN_MATCHER_COV}%) is below 100%"
            CRITICAL_FAIL=1
          fi

          if (( $(echo "$FILE_WATCHER_COV < 100" | bc -l) )); then
            echo "⚠️  WARNING: FileWatcher.swift coverage (${FILE_WATCHER_COV}%) is below 100%"
            CRITICAL_FAIL=1
          fi

          if [ $CRITICAL_FAIL -eq 1 ]; then
            echo "❌ FAIL: Critical paths must have 100% coverage"
            exit 1
          fi

          echo "✅ PASS: Critical paths meet 100% coverage requirement"
